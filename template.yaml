AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ProjectName:
    Type: String
  RDSAdminUser:
    Type: String
  DBInstanceClass:
    Type: String
    Default: db.t2.micro
  AllocatedStorage:
    Type: String
    Default: '5'
  VpcId:
    Type: String
  VpcCIDR:
    Type: String
  DBSubnet1:
    Description: Id for Database subnet 1
    Type: String
  DBSubnet2:
    Description: Id for Database subnet 2
    Type: String
  DBSubnet3:
    Description: Id for Database subnet 3
    Type: String

Resources:
  BlobBucket:
    Type: AWS::S3::Bucket

  BackupBucket:
    Type: AWS::S3::Bucket

  ContainerRepository:
    Type: AWS::ECR::Repository
    Properties: 
      ImageTagMutability: MUTABLE

  AdminRDSCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "/${ProjectName}/rds/MasterDB"
      Description: !Sub 'Generated RDS password for ${ProjectName}'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${RDSAdminUser}"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AdminRDSCredentials
      TargetId: !Ref Database
      TargetType: AWS::RDS::DBInstance

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref AllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: postgres
      MasterUserPassword: 
        !Join ['', ['{{resolve:secretsmanager:', !Ref AdminRDSCredentials, ':SecretString:password}}' ]]
      MasterUsername: 
        !Join ['', ['{{resolve:secretsmanager:', !Ref AdminRDSCredentials, ':SecretString:username}}' ]]
      MultiAZ: true
      PubliclyAccessible: false
      DeletionProtection: true
      VPCSecurityGroups: 
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
    DeletionPolicy: Snapshot
  
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Master DB
      GroupName: !Sub "${ProjectName}-DBSecurityGroup"
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCIDR
          IpProtocol: tcp
          ToPort: 3306
          FromPort: 3306
      VpcId: !Ref VpcId

  DBSubnetGroup:
   Type: AWS::RDS::DBSubnetGroup
   Properties: 
    DBSubnetGroupDescription: Database Subnet Group
    SubnetIds:
      - !Ref DBSubnet1
      - !Ref DBSubnet2
      - !Ref DBSubnet3

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: PullFromECR
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                Resource: !GetAtt ContainerRepository.Arn
        - PolicyName: GetECRCredentials
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - !Ref EC2Role



# UserScript
# aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 657550633622.dkr.ecr.us-east-2.amazonaws.com
# docker pull 657550633622.dkr.ecr.us-east-2.amazonaws.com/qsib-asset-tracking-api-containerrepository-qbkmzy4kcw7z:latest
# docker run -t -i -p 443:443 657550633622.dkr.ecr.us-east-2.amazonaws.com/qsib-asset-tracking-api-containerrepository-qbkmzy4kcw7z:latest